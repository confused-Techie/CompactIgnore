const { spawnSync } = require("node:child_process");
const path = require("path");
const fs = require("fs");

const files = {
  docker: null,
  eslint: null,
  git: null,
  npm: null,
  prettier: null,
};

beforeAll(() => {

  const bin = path.resolve("./bin/compactignore.js");
  const spec = path.resolve("./tests/spec/integration/");

  const command = spawnSync("node", [ bin ], { cwd: spec });

  files.docker = fs.readFileSync(path.resolve("./tests/spec/integration/.dockerignore"), { encoding: "utf8" });
  files.eslint = fs.readFileSync(path.resolve("./tests/spec/integration/.eslintignore"), { encoding: "utf8" });
  files.git = fs.readFileSync(path.resolve("./tests/spec/integration/.gitignore"), { encoding: "utf8" });
  files.npm = fs.readFileSync(path.resolve("./tests/spec/integration/.npmignore"), { encoding: "utf8" });
  files.prettier = fs.readFileSync(path.resolve("./tests/spec/integration/.prettierignore"), { encoding: "utf8" });

  return;
});

describe("Ignore files generate the expected data", () => {

  test(".dockerignore is correct", () => {

    const expected = "# === Autogenerated by CompactIgnore::dockerignore === #\n\n" +
      "# An Orphan Comment to appear at the top of each file\n" +
      "/node/modules\n" +
      "!/keep/this\n" +
      "/only/for/docker\n";

    expect(files.docker).toBe(expected);

  });

  test(".eslintignore is correct", () => {

    const expected = "# === Autogenerated by CompactIgnore::eslintignore === #\n\n" +
      "# An Orphan Comment to appear at the top of each file\n" +
      "/node/modules\n" +
      "!/keep/this\n";

    expect(files.eslint).toBe(expected);
  });

  test(".gitignore is correct", () => {

    const expected = "# === Autogenerated by CompactIgnore::gitignore === #\n\n" +
      "# An Orphan Comment to appear at the top of each file\n" +
      "/node/modules\n" +
      "!/keep/this\n";

    expect(files.git).toBe(expected);

  });

  test(".npmignore is correct", () => {

    const expected = "# === Autogenerated by CompactIgnore::npmignore === #\n\n" +
      "# An Orphan Comment to appear at the top of each file\n" +
      "/node/modules\n" +
      "!/keep/this\n" +
      "/only/for/npm\n";

    expect(files.npm).toBe(expected);

  });

  test(".prettierignore is correct", () => {

    const expected = "# === Autogenerated by CompactIgnore::prettierignore === #\n\n" +
      "# An Orphan Comment to appear at the top of each file\n" +
      "/node/modules\n" +
      "!/keep/this\n" +
      "/only/for/prettier\n";

    expect(files.prettier).toBe(expected);
    
  });

});

afterAll(() => {
  // Delete all our test files we created

  fs.rmSync(path.resolve("./tests/spec/integration/.dockerignore"));
  fs.rmSync(path.resolve("./tests/spec/integration/.eslintignore"));
  fs.rmSync(path.resolve("./tests/spec/integration/.gitignore"));
  fs.rmSync(path.resolve("./tests/spec/integration/.npmignore"));
  fs.rmSync(path.resolve("./tests/spec/integration/.prettierignore"));

});
